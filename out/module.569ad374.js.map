{"mappings":"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","sources":["node_modules/@tootallnate/quickjs-emscripten/dist/module.js","node_modules/@tootallnate/quickjs-emscripten/ts/module.ts","node_modules/@tootallnate/quickjs-emscripten/dist/runtime.js","node_modules/@tootallnate/quickjs-emscripten/ts/runtime.ts","node_modules/@tootallnate/quickjs-emscripten/dist/context.js","node_modules/@tootallnate/quickjs-emscripten/ts/context.ts","node_modules/@tootallnate/quickjs-emscripten/dist/memory.js","node_modules/@tootallnate/quickjs-emscripten/ts/memory.ts","node_modules/@tootallnate/quickjs-emscripten/dist/types.js","node_modules/@tootallnate/quickjs-emscripten/ts/types.ts","node_modules/@tootallnate/quickjs-emscripten/dist/types-ffi.js","node_modules/@tootallnate/quickjs-emscripten/ts/types-ffi.ts"],"sourcesContent":[null,"import { QuickJSContext } from \"./context\"\nimport { debugLog } from \"./debug\"\nimport {\n  Asyncify,\n  AsyncifySleepResult,\n  EitherModule,\n  EmscriptenModuleCallbacks,\n} from \"./emscripten-types\"\nimport { QuickJSAsyncifyError, QuickJSAsyncifySuspended } from \"./errors\"\nimport {\n  BorrowedHeapCharPointer,\n  JSContextPointer,\n  JSRuntimePointer,\n  JSValuePointer,\n} from \"./types-ffi\"\nimport { Lifetime, Scope } from \"./lifetime\"\nimport { InterruptHandler, QuickJSRuntime } from \"./runtime\"\nimport {\n  AsyncRuntimeOptions,\n  concat,\n  ContextOptions,\n  EitherFFI,\n  JSModuleLoader,\n  RuntimeOptions,\n  RuntimeOptionsBase,\n} from \"./types\"\n\ntype EmscriptenCallback<BaseArgs extends any[], Result> = (\n  ...args: [Asyncify | undefined, ...BaseArgs]\n) => Result | AsyncifySleepResult<Result>\ntype MaybeAsyncEmscriptenCallback<T extends EmscriptenCallback<any, any>> =\n  T extends EmscriptenCallback<infer Args, infer Result>\n    ? (...args: Args) => Result | Promise<Result>\n    : never\ntype MaybeAsyncEmscriptenCallbacks = {\n  [K in keyof EmscriptenModuleCallbacks]: MaybeAsyncEmscriptenCallback<EmscriptenModuleCallbacks[K]>\n}\n\n/**\n * @private\n */\nexport interface ContextCallbacks {\n  callFunction: MaybeAsyncEmscriptenCallbacks[\"callFunction\"]\n}\n\n/**\n * @private\n */\nexport interface RuntimeCallbacks {\n  shouldInterrupt: MaybeAsyncEmscriptenCallbacks[\"shouldInterrupt\"]\n  loadModuleSource: MaybeAsyncEmscriptenCallbacks[\"loadModuleSource\"]\n  normalizeModule: MaybeAsyncEmscriptenCallbacks[\"normalizeModule\"]\n}\n\nclass QuickJSEmscriptenModuleCallbacks implements EmscriptenModuleCallbacks {\n  public callFunction: EmscriptenModuleCallbacks[\"callFunction\"]\n  public shouldInterrupt: EmscriptenModuleCallbacks[\"shouldInterrupt\"]\n  public loadModuleSource: EmscriptenModuleCallbacks[\"loadModuleSource\"]\n  public normalizeModule: EmscriptenModuleCallbacks[\"normalizeModule\"]\n  constructor(args: EmscriptenModuleCallbacks) {\n    this.callFunction = args.callFunction\n    this.shouldInterrupt = args.shouldInterrupt\n    this.loadModuleSource = args.loadModuleSource\n    this.normalizeModule = args.normalizeModule\n  }\n}\n\n/**\n * Options for [[QuickJSWASMModule.evalCode]].\n */\nexport interface ModuleEvalOptions {\n  /**\n   * Interrupt evaluation if `shouldInterrupt` returns `true`.\n   * See [[shouldInterruptAfterDeadline]].\n   */\n  shouldInterrupt?: InterruptHandler\n\n  /**\n   * Memory limit, in bytes, of WebAssembly heap memory used by the QuickJS VM.\n   */\n  memoryLimitBytes?: number\n\n  /**\n   * Stack size limit for this vm, in bytes\n   * To remove the limit, set to `0`.\n   */\n  maxStackSizeBytes?: number\n\n  /**\n   * Module loader for any `import` statements or expressions.\n   */\n  moduleLoader?: JSModuleLoader\n}\n\n/**\n * We use static functions per module to dispatch runtime or context calls from\n * C to the host.  This class manages the indirection from a specific runtime or\n * context pointer to the appropriate callback handler.\n *\n * @private\n */\nexport class QuickJSModuleCallbacks {\n  private module: EitherModule\n  private contextCallbacks = new Map<JSContextPointer, ContextCallbacks>()\n  private runtimeCallbacks = new Map<JSRuntimePointer, RuntimeCallbacks>()\n\n  constructor(module: EitherModule) {\n    this.module = module\n    this.module.callbacks = this.cToHostCallbacks\n  }\n\n  setRuntimeCallbacks(rt: JSRuntimePointer, callbacks: RuntimeCallbacks) {\n    this.runtimeCallbacks.set(rt, callbacks)\n  }\n\n  deleteRuntime(rt: JSRuntimePointer) {\n    this.runtimeCallbacks.delete(rt)\n  }\n\n  setContextCallbacks(ctx: JSContextPointer, callbacks: ContextCallbacks) {\n    this.contextCallbacks.set(ctx, callbacks)\n  }\n\n  deleteContext(ctx: JSContextPointer) {\n    this.contextCallbacks.delete(ctx)\n  }\n\n  private suspendedCount = 0\n  private suspended: QuickJSAsyncifySuspended | undefined\n\n  private handleAsyncify<T>(\n    asyncify: Asyncify | undefined,\n    fn: () => T | Promise<T>\n  ): T | AsyncifySleepResult<T> {\n    if (asyncify) {\n      // We must always call asyncify.handleSync around our function.\n      // This allows asyncify to resume suspended execution on the second call.\n      // Asyncify internally can detect sync behavior, and avoid suspending.\n      return asyncify.handleSleep((done) => {\n        try {\n          const result = fn()\n          if (!(result instanceof Promise)) {\n            debugLog(\"asyncify.handleSleep: not suspending:\", result)\n            done(result)\n            return\n          }\n\n          // Is promise, we intend to suspend.\n          if (this.suspended) {\n            throw new QuickJSAsyncifyError(\n              `Already suspended at: ${this.suspended.stack}\\nAttempted to suspend at:`\n            )\n          } else {\n            this.suspended = new QuickJSAsyncifySuspended(`(${this.suspendedCount++})`)\n            debugLog(\"asyncify.handleSleep: suspending:\", this.suspended)\n          }\n\n          result.then(\n            (resolvedResult) => {\n              this.suspended = undefined\n              debugLog(\"asyncify.handleSleep: resolved:\", resolvedResult)\n              done(resolvedResult)\n            },\n            (error) => {\n              debugLog(\"asyncify.handleSleep: rejected:\", error)\n              console.error(\"QuickJS: cannot handle error in suspended function\", error)\n              this.suspended = undefined\n            }\n          )\n        } catch (error) {\n          debugLog(\"asyncify.handleSleep: error:\", error)\n          this.suspended = undefined\n          throw error\n        }\n      })\n    }\n\n    // No asyncify - we should never return a promise.\n    const value = fn()\n    if (value instanceof Promise) {\n      throw new Error(\"Promise return value not supported in non-asyncify context.\")\n    }\n    return value\n  }\n\n  private cToHostCallbacks = new QuickJSEmscriptenModuleCallbacks({\n    callFunction: (asyncify, ctx, this_ptr, argc, argv, fn_id) =>\n      this.handleAsyncify(asyncify, () => {\n        try {\n          const vm = this.contextCallbacks.get(ctx)\n          if (!vm) {\n            throw new Error(`QuickJSContext(ctx = ${ctx}) not found for C function call \"${fn_id}\"`)\n          }\n          return vm.callFunction(ctx, this_ptr, argc, argv, fn_id)\n        } catch (error) {\n          console.error(\"[C to host error: returning null]\", error)\n          return 0 as JSValuePointer\n        }\n      }),\n\n    shouldInterrupt: (asyncify, rt) =>\n      this.handleAsyncify(asyncify, () => {\n        try {\n          const vm = this.runtimeCallbacks.get(rt)\n          if (!vm) {\n            throw new Error(`QuickJSRuntime(rt = ${rt}) not found for C interrupt`)\n          }\n          return vm.shouldInterrupt(rt)\n        } catch (error) {\n          console.error(\"[C to host interrupt: returning error]\", error)\n          return 1\n        }\n      }),\n\n    loadModuleSource: (asyncify, rt, ctx, moduleName) =>\n      this.handleAsyncify(asyncify, () => {\n        try {\n          const runtimeCallbacks = this.runtimeCallbacks.get(rt)\n          if (!runtimeCallbacks) {\n            throw new Error(`QuickJSRuntime(rt = ${rt}) not found for C module loader`)\n          }\n\n          const loadModule = runtimeCallbacks.loadModuleSource\n          if (!loadModule) {\n            throw new Error(`QuickJSRuntime(rt = ${rt}) does not support module loading`)\n          }\n          return loadModule(rt, ctx, moduleName)\n        } catch (error) {\n          console.error(\"[C to host module loader error: returning null]\", error)\n          return 0 as BorrowedHeapCharPointer\n        }\n      }),\n\n    normalizeModule: (asyncify, rt, ctx, moduleBaseName, moduleName) =>\n      this.handleAsyncify(asyncify, () => {\n        try {\n          const runtimeCallbacks = this.runtimeCallbacks.get(rt)\n          if (!runtimeCallbacks) {\n            throw new Error(`QuickJSRuntime(rt = ${rt}) not found for C module loader`)\n          }\n\n          const normalizeModule = runtimeCallbacks.normalizeModule\n          if (!normalizeModule) {\n            throw new Error(`QuickJSRuntime(rt = ${rt}) does not support module loading`)\n          }\n          return normalizeModule(rt, ctx, moduleBaseName, moduleName)\n        } catch (error) {\n          console.error(\"[C to host module loader error: returning null]\", error)\n          return 0 as BorrowedHeapCharPointer\n        }\n      }),\n  })\n}\n\n/**\n * Process RuntimeOptions and apply them to a QuickJSRuntime.\n * @private\n */\nexport function applyBaseRuntimeOptions(\n  runtime: QuickJSRuntime,\n  options: RuntimeOptionsBase\n): void {\n  if (options.interruptHandler) {\n    runtime.setInterruptHandler(options.interruptHandler)\n  }\n\n  if (options.maxStackSizeBytes !== undefined) {\n    runtime.setMaxStackSize(options.maxStackSizeBytes)\n  }\n\n  if (options.memoryLimitBytes !== undefined) {\n    runtime.setMemoryLimit(options.memoryLimitBytes)\n  }\n}\n\n/**\n * Process ModuleEvalOptions and apply them to a QuickJSRuntime.\n * @private\n */\nexport function applyModuleEvalRuntimeOptions<T extends QuickJSRuntime>(\n  runtime: T,\n  options: ModuleEvalOptions\n) {\n  if (options.moduleLoader) {\n    runtime.setModuleLoader(options.moduleLoader)\n  }\n\n  if (options.shouldInterrupt) {\n    runtime.setInterruptHandler(options.shouldInterrupt)\n  }\n\n  if (options.memoryLimitBytes !== undefined) {\n    runtime.setMemoryLimit(options.memoryLimitBytes)\n  }\n\n  if (options.maxStackSizeBytes !== undefined) {\n    runtime.setMaxStackSize(options.maxStackSizeBytes)\n  }\n}\n\n/**\n * This class presents a Javascript interface to QuickJS, a Javascript interpreter\n * that supports EcmaScript 2020 (ES2020).\n *\n * It wraps a single WebAssembly module containing the QuickJS library and\n * associated helper C code. WebAssembly modules are completely isolated from\n * each other by the host's WebAssembly runtime. Separate WebAssembly modules\n * have the most isolation guarantees possible with this library.\n *\n * The simplest way to start running code is {@link evalCode}. This shortcut\n * method will evaluate Javascript safely and return the result as a native\n * Javascript value.\n *\n * For more control over the execution environment, or to interact with values\n * inside QuickJS, create a context with {@link newContext} or a runtime with\n * {@link newRuntime}.\n */\nexport class QuickJSWASMModule {\n  /** @private */\n  protected ffi: EitherFFI\n  /** @private */\n  protected callbacks: QuickJSModuleCallbacks\n  /** @private */\n  protected module: EitherModule\n\n  /** @private */\n  constructor(module: EitherModule, ffi: EitherFFI) {\n    this.module = module\n    this.ffi = ffi\n    this.callbacks = new QuickJSModuleCallbacks(module)\n  }\n\n  /**\n   * Create a runtime.\n   * Use the runtime to set limits on CPU and memory usage and configure module\n   * loading for one or more [[QuickJSContext]]s inside the runtime.\n   */\n  newRuntime(options: RuntimeOptions = {}): QuickJSRuntime {\n    const rt = new Lifetime(this.ffi.QTS_NewRuntime(), undefined, (rt_ptr) => {\n      this.callbacks.deleteRuntime(rt_ptr)\n      this.ffi.QTS_FreeRuntime(rt_ptr)\n    })\n\n    const runtime = new QuickJSRuntime({\n      module: this.module,\n      callbacks: this.callbacks,\n      ffi: this.ffi,\n      rt,\n    })\n\n    applyBaseRuntimeOptions(runtime, options)\n\n    if (options.moduleLoader) {\n      runtime.setModuleLoader(options.moduleLoader)\n    }\n\n    return runtime\n  }\n\n  /**\n   * A simplified API to create a new [[QuickJSRuntime]] and a\n   * [[QuickJSContext]] inside that runtime at the same time. The runtime will\n   * be disposed when the context is disposed.\n   */\n  newContext(options: ContextOptions = {}): QuickJSContext {\n    const runtime = this.newRuntime()\n    const context = runtime.newContext({\n      ...options,\n      ownedLifetimes: concat(runtime, options.ownedLifetimes),\n    })\n    runtime.context = context\n    return context\n  }\n\n  /**\n   * One-off evaluate code without needing to create a [[QuickJSRuntime]] or\n   * [[QuickJSContext]] explicitly.\n   *\n   * To protect against infinite loops, use the `shouldInterrupt` option. The\n   * [[shouldInterruptAfterDeadline]] function will create a time-based deadline.\n   *\n   * If you need more control over how the code executes, create a\n   * [[QuickJSRuntime]] (with [[newRuntime]]) or a [[QuickJSContext]] (with\n   * [[newContext]] or [[QuickJSRuntime.newContext]]), and use its\n   * [[QuickJSContext.evalCode]] method.\n   *\n   * Asynchronous callbacks may not run during the first call to `evalCode`. If\n   * you need to work with async code inside QuickJS, create a runtime and use\n   * [[QuickJSRuntime.executePendingJobs]].\n   *\n   * @returns The result is coerced to a native Javascript value using JSON\n   * serialization, so properties and values unsupported by JSON will be dropped.\n   *\n   * @throws If `code` throws during evaluation, the exception will be\n   * converted into a native Javascript value and thrown.\n   *\n   * @throws if `options.shouldInterrupt` interrupted execution, will throw a Error\n   * with name `\"InternalError\"` and  message `\"interrupted\"`.\n   */\n  evalCode(code: string, options: ModuleEvalOptions = {}): unknown {\n    return Scope.withScope((scope) => {\n      const vm = scope.manage(this.newContext())\n\n      applyModuleEvalRuntimeOptions(vm.runtime, options)\n      const result = vm.evalCode(code, \"eval.js\")\n\n      if (options.memoryLimitBytes !== undefined) {\n        // Remove memory limit so we can dump the result without exceeding it.\n        vm.runtime.setMemoryLimit(-1)\n      }\n\n      if (result.error) {\n        const error = vm.dump(scope.manage(result.error))\n        throw error\n      }\n\n      const value = vm.dump(scope.manage(result.value))\n      return value\n    })\n  }\n\n  /**\n   * Get a low-level interface to the QuickJS functions in this WebAssembly\n   * module.\n   * @experimental\n   * @unstable No warranty is provided with this API. It could change at any time.\n   * @private\n   */\n  getFFI(): EitherFFI {\n    return this.ffi\n  }\n}\n",null,"import { maybeAsyncFn } from \"./asyncify-helpers\"\nimport { QuickJSContext } from \"./context\"\nimport { debugLog } from \"./debug\"\nimport { EitherModule } from \"./emscripten-types\"\nimport { QuickJSWrongOwner } from \"./errors\"\nimport {\n  BorrowedHeapCharPointer,\n  JSContextPointer,\n  JSContextPointerPointer,\n  JSModuleDefPointer,\n  JSRuntimePointer,\n} from \"./types-ffi\"\nimport { Disposable, Lifetime, Scope } from \"./lifetime\"\nimport { ModuleMemory } from \"./memory\"\nimport { QuickJSModuleCallbacks, RuntimeCallbacks } from \"./module\"\nimport {\n  ContextOptions,\n  DefaultIntrinsics,\n  EitherFFI,\n  JSModuleLoader,\n  JSModuleNormalizer,\n  QuickJSHandle,\n} from \"./types\"\nimport { SuccessOrFail } from \"./vm-interface\"\n\n/**\n * Callback called regularly while the VM executes code.\n * Determines if a VM's execution should be interrupted.\n *\n * @returns `true` to interrupt JS execution inside the VM.\n * @returns `false` or `undefined` to continue JS execution inside the VM.\n */\nexport type InterruptHandler = (runtime: QuickJSRuntime) => boolean | undefined\n\n/**\n * Used as an optional for the results of executing pendingJobs.\n * On success, `value` contains the number of async jobs executed\n * by the runtime.\n * @source\n */\nexport type ExecutePendingJobsResult = SuccessOrFail<\n  /** Number of jobs successfully executed. */\n  number,\n  /** The error that occurred. */\n  QuickJSHandle & {\n    /** The context where the error occurred. */\n    context: QuickJSContext\n  }\n>\n\n/**\n * A runtime represents a Javascript runtime corresponding to an object heap.\n * Several runtimes can exist at the same time but they cannot exchange objects.\n * Inside a given runtime, no multi-threading is supported.\n *\n * You can think of separate runtimes like different domains in a browser, and\n * the contexts within a runtime like the different windows open to the same\n * domain.\n *\n * Create a runtime via {@link QuickJSWASMModule.newRuntime}.\n *\n * You should create separate runtime instances for untrusted code from\n * different sources for isolation. However, stronger isolation is also\n * available (at the cost of memory usage), by creating separate WebAssembly\n * modules to further isolate untrusted code.\n * See {@link newQuickJSWASMModule}.\n *\n * Implement memory and CPU constraints with [[setInterruptHandler]]\n * (called regularly while the interpreter runs), [[setMemoryLimit]], and\n * [[setMaxStackSize]].\n * Use [[computeMemoryUsage]] or [[dumpMemoryUsage]] to guide memory limit\n * tuning.\n *\n * Configure ES module loading with [[setModuleLoader]].\n */\nexport class QuickJSRuntime implements Disposable {\n  /**\n   * If this runtime was created as as part of a context, points to the context\n   * associated with the runtime.\n   *\n   * If this runtime was created stand-alone, this may or may not contain a context.\n   * A context here may be allocated if one is needed by the runtime, eg for [[computeMemoryUsage]].\n   */\n  public context: QuickJSContext | undefined\n\n  /** @private */\n  protected module: EitherModule\n  /** @private */\n  protected memory: ModuleMemory\n  /** @private */\n  protected ffi: EitherFFI\n  /** @private */\n  protected rt: Lifetime<JSRuntimePointer>\n  /** @private */\n  protected callbacks: QuickJSModuleCallbacks\n  /** @private */\n  protected scope = new Scope()\n\n  /** @private */\n  protected contextMap = new Map<JSContextPointer, QuickJSContext>()\n  /** @private */\n  protected moduleLoader: JSModuleLoader | undefined\n  /** @private */\n  protected moduleNormalizer: JSModuleNormalizer | undefined\n\n  /** @private */\n  constructor(args: {\n    module: EitherModule\n    ffi: EitherFFI\n    rt: Lifetime<JSRuntimePointer>\n    callbacks: QuickJSModuleCallbacks\n    ownedLifetimes?: Disposable[]\n  }) {\n    args.ownedLifetimes?.forEach((lifetime) => this.scope.manage(lifetime))\n    this.module = args.module\n    this.memory = new ModuleMemory(this.module)\n    this.ffi = args.ffi\n    this.rt = args.rt\n    this.callbacks = args.callbacks\n    this.scope.manage(this.rt)\n    this.callbacks.setRuntimeCallbacks(this.rt.value, this.cToHostCallbacks)\n\n    this.executePendingJobs = this.executePendingJobs.bind(this)\n  }\n\n  get alive() {\n    return this.scope.alive\n  }\n\n  dispose() {\n    return this.scope.dispose()\n  }\n\n  newContext(options: ContextOptions = {}): QuickJSContext {\n    if (options.intrinsics && options.intrinsics !== DefaultIntrinsics) {\n      throw new Error(\"TODO: Custom intrinsics are not supported yet\")\n    }\n\n    const ctx = new Lifetime(\n      options.contextPointer || this.ffi.QTS_NewContext(this.rt.value),\n      undefined,\n      (ctx_ptr) => {\n        this.contextMap.delete(ctx_ptr)\n        this.callbacks.deleteContext(ctx_ptr)\n        this.ffi.QTS_FreeContext(ctx_ptr)\n      }\n    )\n\n    const context = new QuickJSContext({\n      module: this.module,\n      ctx,\n      ffi: this.ffi,\n      rt: this.rt,\n      ownedLifetimes: options.ownedLifetimes,\n      runtime: this,\n      callbacks: this.callbacks,\n    })\n    this.contextMap.set(ctx.value, context)\n\n    return context\n  }\n\n  /**\n   * Set the loader for EcmaScript modules requested by any context in this\n   * runtime.\n   *\n   * The loader can be removed with [[removeModuleLoader]].\n   */\n  setModuleLoader(moduleLoader: JSModuleLoader, moduleNormalizer?: JSModuleNormalizer): void {\n    this.moduleLoader = moduleLoader\n    this.moduleNormalizer = moduleNormalizer\n    this.ffi.QTS_RuntimeEnableModuleLoader(this.rt.value, this.moduleNormalizer ? 1 : 0)\n  }\n\n  /**\n   * Remove the the loader set by [[setModuleLoader]]. This disables module loading.\n   */\n  removeModuleLoader(): void {\n    this.moduleLoader = undefined\n    this.ffi.QTS_RuntimeDisableModuleLoader(this.rt.value)\n  }\n\n  // Runtime management -------------------------------------------------------\n\n  /**\n   * In QuickJS, promises and async functions create pendingJobs. These do not execute\n   * immediately and need to be run by calling [[executePendingJobs]].\n   *\n   * @return true if there is at least one pendingJob queued up.\n   */\n  hasPendingJob(): boolean {\n    return Boolean(this.ffi.QTS_IsJobPending(this.rt.value))\n  }\n\n  private interruptHandler: InterruptHandler | undefined\n\n  /**\n   * Set a callback which is regularly called by the QuickJS engine when it is\n   * executing code. This callback can be used to implement an execution\n   * timeout.\n   *\n   * The interrupt handler can be removed with [[removeInterruptHandler]].\n   */\n  setInterruptHandler(cb: InterruptHandler) {\n    const prevInterruptHandler = this.interruptHandler\n    this.interruptHandler = cb\n    if (!prevInterruptHandler) {\n      this.ffi.QTS_RuntimeEnableInterruptHandler(this.rt.value)\n    }\n  }\n\n  /**\n   * Remove the interrupt handler, if any.\n   * See [[setInterruptHandler]].\n   */\n  removeInterruptHandler() {\n    if (this.interruptHandler) {\n      this.ffi.QTS_RuntimeDisableInterruptHandler(this.rt.value)\n      this.interruptHandler = undefined\n    }\n  }\n\n  /**\n   * Execute pendingJobs on the runtime until `maxJobsToExecute` jobs are\n   * executed (default all pendingJobs), the queue is exhausted, or the runtime\n   * encounters an exception.\n   *\n   * In QuickJS, promises and async functions *inside the runtime* create\n   * pendingJobs. These do not execute immediately and need to triggered to run.\n   *\n   * @param maxJobsToExecute - When negative, run all pending jobs. Otherwise execute\n   * at most `maxJobsToExecute` before returning.\n   *\n   * @return On success, the number of executed jobs. On error, the exception\n   * that stopped execution, and the context it occurred in. Note that\n   * executePendingJobs will not normally return errors thrown inside async\n   * functions or rejected promises. Those errors are available by calling\n   * [[resolvePromise]] on the promise handle returned by the async function.\n   */\n  executePendingJobs(maxJobsToExecute: number | void = -1): ExecutePendingJobsResult {\n    const ctxPtrOut = this.memory.newMutablePointerArray<JSContextPointerPointer>(1)\n    const valuePtr = this.ffi.QTS_ExecutePendingJob(\n      this.rt.value,\n      maxJobsToExecute ?? -1,\n      ctxPtrOut.value.ptr\n    )\n\n    const ctxPtr = ctxPtrOut.value.typedArray[0] as JSContextPointer\n    ctxPtrOut.dispose()\n    if (ctxPtr === 0) {\n      // No jobs executed.\n      this.ffi.QTS_FreeValuePointerRuntime(this.rt.value, valuePtr)\n      return { value: 0 }\n    }\n\n    const context =\n      this.contextMap.get(ctxPtr) ??\n      this.newContext({\n        contextPointer: ctxPtr,\n      })\n\n    const resultValue = context.getMemory(this.rt.value).heapValueHandle(valuePtr)\n    const typeOfRet = context.typeof(resultValue)\n    if (typeOfRet === \"number\") {\n      const executedJobs = context.getNumber(resultValue)\n      resultValue.dispose()\n      return { value: executedJobs }\n    } else {\n      const error = Object.assign(resultValue, { context })\n      return {\n        error,\n      }\n    }\n  }\n\n  /**\n   * Set the max memory this runtime can allocate.\n   * To remove the limit, set to `-1`.\n   */\n  setMemoryLimit(limitBytes: number) {\n    if (limitBytes < 0 && limitBytes !== -1) {\n      throw new Error(\"Cannot set memory limit to negative number. To unset, pass -1\")\n    }\n\n    this.ffi.QTS_RuntimeSetMemoryLimit(this.rt.value, limitBytes)\n  }\n\n  /**\n   * Compute memory usage for this runtime. Returns the result as a handle to a\n   * JSValue object. Use [[QuickJSContext.dump]] to convert to a native object.\n   * Calling this method will allocate more memory inside the runtime. The information\n   * is accurate as of just before the call to `computeMemoryUsage`.\n   * For a human-digestible representation, see [[dumpMemoryUsage]].\n   */\n  computeMemoryUsage(): QuickJSHandle {\n    const serviceContextMemory = this.getSystemContext().getMemory(this.rt.value)\n    return serviceContextMemory.heapValueHandle(\n      this.ffi.QTS_RuntimeComputeMemoryUsage(this.rt.value, serviceContextMemory.ctx.value)\n    )\n  }\n\n  /**\n   * @returns a human-readable description of memory usage in this runtime.\n   * For programmatic access to this information, see [[computeMemoryUsage]].\n   */\n  dumpMemoryUsage(): string {\n    return this.memory.consumeHeapCharPointer(this.ffi.QTS_RuntimeDumpMemoryUsage(this.rt.value))\n  }\n\n  /**\n   * Set the max stack size for this runtime, in bytes.\n   * To remove the limit, set to `0`.\n   */\n  setMaxStackSize(stackSize: number) {\n    if (stackSize < 0) {\n      throw new Error(\"Cannot set memory limit to negative number. To unset, pass 0.\")\n    }\n\n    this.ffi.QTS_RuntimeSetMaxStackSize(this.rt.value, stackSize)\n  }\n\n  /**\n   * Assert that `handle` is owned by this runtime.\n   * @throws QuickJSWrongOwner if owned by a different runtime.\n   */\n  assertOwned(handle: QuickJSHandle) {\n    if (handle.owner && handle.owner.rt !== this.rt) {\n      throw new QuickJSWrongOwner(\n        `Handle is not owned by this runtime: ${handle.owner.rt.value} != ${this.rt.value}`\n      )\n    }\n  }\n\n  private getSystemContext() {\n    if (!this.context) {\n      // We own this context and should dispose of it.\n      this.context = this.scope.manage(this.newContext())\n    }\n    return this.context\n  }\n\n  private cToHostCallbacks: RuntimeCallbacks = {\n    shouldInterrupt: (rt) => {\n      if (rt !== this.rt.value) {\n        throw new Error(\"QuickJSContext instance received C -> JS interrupt with mismatched rt\")\n      }\n\n      const fn = this.interruptHandler\n      if (!fn) {\n        throw new Error(\"QuickJSContext had no interrupt handler\")\n      }\n\n      return fn(this) ? 1 : 0\n    },\n\n    loadModuleSource: maybeAsyncFn(this, function* (awaited, rt, ctx, moduleName) {\n      const moduleLoader = this.moduleLoader\n      if (!moduleLoader) {\n        throw new Error(\"Runtime has no module loader\")\n      }\n\n      if (rt !== this.rt.value) {\n        throw new Error(\"Runtime pointer mismatch\")\n      }\n\n      const context =\n        this.contextMap.get(ctx) ??\n        this.newContext({\n          contextPointer: ctx,\n        })\n\n      try {\n        const result = yield* awaited(moduleLoader(moduleName, context))\n\n        if (typeof result === \"object\" && \"error\" in result && result.error) {\n          debugLog(\"cToHostLoadModule: loader returned error\", result.error)\n          throw result.error\n        }\n\n        const moduleSource =\n          typeof result === \"string\" ? result : \"value\" in result ? result.value : result\n\n        return this.memory.newHeapCharPointer(moduleSource).value\n      } catch (error) {\n        debugLog(\"cToHostLoadModule: caught error\", error)\n        context.throw(error as any)\n        return 0 as BorrowedHeapCharPointer\n      }\n    }),\n\n    normalizeModule: maybeAsyncFn(\n      this,\n      function* (awaited, rt, ctx, baseModuleName, moduleNameRequest) {\n        const moduleNormalizer = this.moduleNormalizer\n        if (!moduleNormalizer) {\n          throw new Error(\"Runtime has no module normalizer\")\n        }\n\n        if (rt !== this.rt.value) {\n          throw new Error(\"Runtime pointer mismatch\")\n        }\n\n        const context =\n          this.contextMap.get(ctx) ??\n          this.newContext({\n            /* TODO: Does this happen? Are we responsible for disposing? I don't think so */\n            contextPointer: ctx,\n          })\n\n        try {\n          const result = yield* awaited(\n            moduleNormalizer(baseModuleName, moduleNameRequest, context)\n          )\n\n          if (typeof result === \"object\" && \"error\" in result && result.error) {\n            debugLog(\"cToHostNormalizeModule: normalizer returned error\", result.error)\n            throw result.error\n          }\n\n          const name = typeof result === \"string\" ? result : result.value\n          return context.getMemory(this.rt.value).newHeapCharPointer(name).value\n        } catch (error) {\n          debugLog(\"normalizeModule: caught error\", error)\n          context.throw(error as any)\n          return 0 as BorrowedHeapCharPointer\n        }\n      }\n    ),\n  }\n}\n",null,"import { debugLog } from \"./debug\"\nimport { QuickJSDeferredPromise } from \"./deferred-promise\"\nimport type { EitherModule } from \"./emscripten-types\"\nimport { QuickJSUnwrapError } from \"./errors\"\nimport {\n  EvalDetectModule,\n  EvalFlags,\n  JSBorrowedCharPointer,\n  JSContextPointer,\n  JSModuleDefPointer,\n  JSRuntimePointer,\n  JSValueConstPointer,\n  JSValuePointer,\n  JSValuePointerPointer,\n  JSVoidPointer,\n} from \"./types-ffi\"\nimport { Disposable, Lifetime, Scope, StaticLifetime, WeakLifetime } from \"./lifetime\"\nimport { ModuleMemory } from \"./memory\"\nimport { ContextCallbacks, QuickJSModuleCallbacks } from \"./module\"\nimport { QuickJSRuntime } from \"./runtime\"\nimport {\n  ContextEvalOptions,\n  EitherFFI,\n  evalOptionsToFlags,\n  JSValue,\n  PromiseExecutor,\n  QuickJSHandle,\n} from \"./types\"\nimport {\n  LowLevelJavascriptVm,\n  SuccessOrFail,\n  VmCallResult,\n  VmFunctionImplementation,\n  VmPropertyDescriptor,\n} from \"./vm-interface\"\n\n/**\n * Property key for getting or setting a property on a handle with\n * [[QuickJSContext.getProp]], [[QuickJSContext.setProp]], or [[QuickJSContext.defineProp]].\n */\nexport type QuickJSPropertyKey = number | string | QuickJSHandle\n\n/**\n * @private\n */\nclass ContextMemory extends ModuleMemory implements Disposable {\n  readonly owner: QuickJSRuntime\n  readonly ctx: Lifetime<JSContextPointer>\n  readonly rt: Lifetime<JSRuntimePointer>\n  readonly module: EitherModule\n  readonly ffi: EitherFFI\n  readonly scope = new Scope()\n\n  /** @private */\n  constructor(args: {\n    owner: QuickJSRuntime\n    module: EitherModule\n    ffi: EitherFFI\n    ctx: Lifetime<JSContextPointer>\n    rt: Lifetime<JSRuntimePointer>\n    ownedLifetimes?: Disposable[]\n  }) {\n    super(args.module)\n    args.ownedLifetimes?.forEach((lifetime) => this.scope.manage(lifetime))\n    this.owner = args.owner\n    this.module = args.module\n    this.ffi = args.ffi\n    this.rt = args.rt\n    this.ctx = this.scope.manage(args.ctx)\n  }\n\n  get alive() {\n    return this.scope.alive\n  }\n\n  dispose() {\n    return this.scope.dispose()\n  }\n\n  /**\n   * Track `lifetime` so that it is disposed when this scope is disposed.\n   */\n  manage<T extends Disposable>(lifetime: T): T {\n    return this.scope.manage(lifetime)\n  }\n\n  copyJSValue = (ptr: JSValuePointer | JSValueConstPointer) => {\n    return this.ffi.QTS_DupValuePointer(this.ctx.value, ptr)\n  }\n\n  freeJSValue = (ptr: JSValuePointer) => {\n    this.ffi.QTS_FreeValuePointer(this.ctx.value, ptr)\n  }\n\n  consumeJSCharPointer(ptr: JSBorrowedCharPointer): string {\n    const str = this.module.UTF8ToString(ptr)\n    this.ffi.QTS_FreeCString(this.ctx.value, ptr)\n    return str\n  }\n\n  heapValueHandle(ptr: JSValuePointer): JSValue {\n    return new Lifetime(ptr, this.copyJSValue, this.freeJSValue, this.owner)\n  }\n}\n\n/**\n * QuickJSContext wraps a QuickJS Javascript context (JSContext*) within a\n * runtime. The contexts within the same runtime may exchange objects freely.\n * You can think of separate runtimes like different domains in a browser, and\n * the contexts within a runtime like the different windows open to the same\n * domain. The {@link runtime} references the context's runtime.\n *\n * This class's methods return {@link QuickJSHandle}, which wrap C pointers (JSValue*).\n * It's the caller's responsibility to call `.dispose()` on any\n * handles you create to free memory once you're done with the handle.\n *\n * Use {@link QuickJSRuntime.newContext} or {@link QuickJSWASMModule.newContext}\n * to create a new QuickJSContext.\n *\n * Create QuickJS values inside the interpreter with methods like\n * [[newNumber]], [[newString]], [[newArray]], [[newObject]],\n * [[newFunction]], and [[newPromise]].\n *\n * Call [[setProp]] or [[defineProp]] to customize objects. Use those methods\n * with [[global]] to expose the values you create to the interior of the\n * interpreter, so they can be used in [[evalCode]].\n *\n * Use [[evalCode]] or [[callFunction]] to execute Javascript inside the VM. If\n * you're using asynchronous code inside the QuickJSContext, you may need to also\n * call [[executePendingJobs]]. Executing code inside the runtime returns a\n * result object representing successful execution or an error. You must dispose\n * of any such results to avoid leaking memory inside the VM.\n *\n * Implement memory and CPU constraints at the runtime level, using [[runtime]].\n * See {@link QuickJSRuntime} for more information.\n *\n */\n// TODO: Manage own callback registration\nexport class QuickJSContext implements LowLevelJavascriptVm<QuickJSHandle>, Disposable {\n  /**\n   * The runtime that created this context.\n   */\n  public readonly runtime: QuickJSRuntime\n\n  /** @private */\n  protected readonly ctx: Lifetime<JSContextPointer>\n  /** @private */\n  protected readonly rt: Lifetime<JSRuntimePointer>\n  /** @private */\n  protected readonly module: EitherModule\n  /** @private */\n  protected readonly ffi: EitherFFI\n  /** @private */\n  protected memory: ContextMemory\n\n  /** @private */\n  protected _undefined: QuickJSHandle | undefined = undefined\n  /** @private */\n  protected _null: QuickJSHandle | undefined = undefined\n  /** @private */\n  protected _false: QuickJSHandle | undefined = undefined\n  /** @private */\n  protected _true: QuickJSHandle | undefined = undefined\n  /** @private */\n  protected _global: QuickJSHandle | undefined = undefined\n  /** @private */\n  protected _BigInt: QuickJSHandle | undefined = undefined\n\n  /**\n   * Use {@link QuickJS.createVm} to create a QuickJSContext instance.\n   */\n  constructor(args: {\n    module: EitherModule\n    ffi: EitherFFI\n    ctx: Lifetime<JSContextPointer>\n    rt: Lifetime<JSRuntimePointer>\n    runtime: QuickJSRuntime\n    ownedLifetimes?: Disposable[]\n    callbacks: QuickJSModuleCallbacks\n  }) {\n    this.runtime = args.runtime\n    this.module = args.module\n    this.ffi = args.ffi\n    this.rt = args.rt\n    this.ctx = args.ctx\n    this.memory = new ContextMemory({\n      ...args,\n      owner: this.runtime,\n    })\n    args.callbacks.setContextCallbacks(this.ctx.value, this.cToHostCallbacks)\n    this.dump = this.dump.bind(this)\n    this.getString = this.getString.bind(this)\n    this.getNumber = this.getNumber.bind(this)\n    this.resolvePromise = this.resolvePromise.bind(this)\n  }\n\n  // @implement Disposable ----------------------------------------------------\n\n  get alive() {\n    return this.memory.alive\n  }\n\n  /**\n   * Dispose of this VM's underlying resources.\n   *\n   * @throws Calling this method without disposing of all created handles\n   * will result in an error.\n   */\n  dispose() {\n    this.memory.dispose()\n  }\n\n  // Globals ------------------------------------------------------------------\n\n  /**\n   * [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined).\n   */\n  get undefined(): QuickJSHandle {\n    if (this._undefined) {\n      return this._undefined\n    }\n\n    // Undefined is a constant, immutable value in QuickJS.\n    const ptr = this.ffi.QTS_GetUndefined()\n    return (this._undefined = new StaticLifetime(ptr))\n  }\n\n  /**\n   * [`null`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null).\n   */\n  get null(): QuickJSHandle {\n    if (this._null) {\n      return this._null\n    }\n\n    // Null is a constant, immutable value in QuickJS.\n    const ptr = this.ffi.QTS_GetNull()\n    return (this._null = new StaticLifetime(ptr))\n  }\n\n  /**\n   * [`true`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/true).\n   */\n  get true(): QuickJSHandle {\n    if (this._true) {\n      return this._true\n    }\n\n    // True is a constant, immutable value in QuickJS.\n    const ptr = this.ffi.QTS_GetTrue()\n    return (this._true = new StaticLifetime(ptr))\n  }\n\n  /**\n   * [`false`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/false).\n   */\n  get false(): QuickJSHandle {\n    if (this._false) {\n      return this._false\n    }\n\n    // False is a constant, immutable value in QuickJS.\n    const ptr = this.ffi.QTS_GetFalse()\n    return (this._false = new StaticLifetime(ptr))\n  }\n\n  /**\n   * [`global`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects).\n   * A handle to the global object inside the interpreter.\n   * You can set properties to create global variables.\n   */\n  get global(): QuickJSHandle {\n    if (this._global) {\n      return this._global\n    }\n\n    // The global is a JSValue, but since it's lifetime is as long as the VM's,\n    // we should manage it.\n    const ptr = this.ffi.QTS_GetGlobalObject(this.ctx.value)\n\n    // Automatically clean up this reference when we dispose\n    this.memory.manage(this.memory.heapValueHandle(ptr))\n\n    // This isn't technically a static lifetime, but since it has the same\n    // lifetime as the VM, it's okay to fake one since when the VM is\n    // disposed, no other functions will accept the value.\n    this._global = new StaticLifetime(ptr, this.runtime)\n    return this._global\n  }\n\n  // New values ---------------------------------------------------------------\n\n  /**\n   * Converts a Javascript number into a QuickJS value.\n   */\n  newNumber(num: number): QuickJSHandle {\n    return this.memory.heapValueHandle(this.ffi.QTS_NewFloat64(this.ctx.value, num))\n  }\n\n  /**\n   * Create a QuickJS [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String) value.\n   */\n  newString(str: string): QuickJSHandle {\n    const ptr = this.memory\n      .newHeapCharPointer(str)\n      .consume((charHandle) => this.ffi.QTS_NewString(this.ctx.value, charHandle.value))\n    return this.memory.heapValueHandle(ptr)\n  }\n\n  /**\n   * Create a QuickJS [symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol) value.\n   * No two symbols created with this function will be the same value.\n   */\n  newUniqueSymbol(description: string | symbol): QuickJSHandle {\n    const key = (typeof description === \"symbol\" ? description.description : description) ?? \"\"\n    const ptr = this.memory\n      .newHeapCharPointer(key)\n      .consume((charHandle) => this.ffi.QTS_NewSymbol(this.ctx.value, charHandle.value, 0))\n    return this.memory.heapValueHandle(ptr)\n  }\n\n  /**\n   * Get a symbol from the [global registry](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#shared_symbols_in_the_global_symbol_registry) for the given key.\n   * All symbols created with the same key will be the same value.\n   */\n  newSymbolFor(key: string | symbol): QuickJSHandle {\n    const description = (typeof key === \"symbol\" ? key.description : key) ?? \"\"\n    const ptr = this.memory\n      .newHeapCharPointer(description)\n      .consume((charHandle) => this.ffi.QTS_NewSymbol(this.ctx.value, charHandle.value, 1))\n    return this.memory.heapValueHandle(ptr)\n  }\n\n  /**\n   * Create a QuickJS [bigint](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt) value.\n   */\n  newBigInt(num: bigint): QuickJSHandle {\n    if (!this._BigInt) {\n      const bigIntHandle = this.getProp(this.global, \"BigInt\")\n      this.memory.manage(bigIntHandle)\n      this._BigInt = new StaticLifetime(bigIntHandle.value as JSValueConstPointer, this.runtime)\n    }\n\n    const bigIntHandle = this._BigInt\n    const asString = String(num)\n    return this.newString(asString).consume((handle) =>\n      this.unwrapResult(this.callFunction(bigIntHandle, this.undefined, handle))\n    )\n  }\n\n  /**\n   * `{}`.\n   * Create a new QuickJS [object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer).\n   *\n   * @param prototype - Like [`Object.create`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create).\n   */\n  newObject(prototype?: QuickJSHandle): QuickJSHandle {\n    if (prototype) {\n      this.runtime.assertOwned(prototype)\n    }\n    const ptr = prototype\n      ? this.ffi.QTS_NewObjectProto(this.ctx.value, prototype.value)\n      : this.ffi.QTS_NewObject(this.ctx.value)\n    return this.memory.heapValueHandle(ptr)\n  }\n\n  /**\n   * `[]`.\n   * Create a new QuickJS [array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array).\n   */\n  newArray(): QuickJSHandle {\n    const ptr = this.ffi.QTS_NewArray(this.ctx.value)\n    return this.memory.heapValueHandle(ptr)\n  }\n\n  /**\n   * Create a new [[QuickJSDeferredPromise]]. Use `deferred.resolve(handle)` and\n   * `deferred.reject(handle)` to fulfill the promise handle available at `deferred.handle`.\n   * Note that you are responsible for calling `deferred.dispose()` to free the underlying\n   * resources; see the documentation on [[QuickJSDeferredPromise]] for details.\n   */\n  newPromise(): QuickJSDeferredPromise\n  /**\n   * Create a new [[QuickJSDeferredPromise]] that resolves when the\n   * given native Promise<QuickJSHandle> resolves. Rejections will be coerced\n   * to a QuickJS error.\n   *\n   * You can still resolve/reject the created promise \"early\" using its methods.\n   */\n  newPromise(promise: Promise<QuickJSHandle>): QuickJSDeferredPromise\n  /**\n   * Construct a new native Promise<QuickJSHandle>, and then convert it into a\n   * [[QuickJSDeferredPromise]].\n   *\n   * You can still resolve/reject the created promise \"early\" using its methods.\n   */\n  newPromise(\n    newPromiseFn: PromiseExecutor<QuickJSHandle, Error | QuickJSHandle>\n  ): QuickJSDeferredPromise\n  newPromise(\n    value?: PromiseExecutor<QuickJSHandle, Error | QuickJSHandle> | Promise<QuickJSHandle>\n  ): QuickJSDeferredPromise {\n    const deferredPromise = Scope.withScope((scope) => {\n      const mutablePointerArray = scope.manage(\n        this.memory.newMutablePointerArray<JSValuePointerPointer>(2)\n      )\n      const promisePtr = this.ffi.QTS_NewPromiseCapability(\n        this.ctx.value,\n        mutablePointerArray.value.ptr\n      )\n      const promiseHandle = this.memory.heapValueHandle(promisePtr)\n      const [resolveHandle, rejectHandle] = Array.from(mutablePointerArray.value.typedArray).map(\n        (jsvaluePtr) => this.memory.heapValueHandle(jsvaluePtr as any)\n      )\n      return new QuickJSDeferredPromise({\n        context: this,\n        promiseHandle,\n        resolveHandle,\n        rejectHandle,\n      })\n    })\n\n    if (value && typeof value === \"function\") {\n      value = new Promise(value)\n    }\n\n    if (value) {\n      Promise.resolve(value).then(deferredPromise.resolve, (error) =>\n        error instanceof Lifetime\n          ? deferredPromise.reject(error)\n          : this.newError(error).consume(deferredPromise.reject)\n      )\n    }\n\n    return deferredPromise\n  }\n\n  /**\n   * Convert a Javascript function into a QuickJS function value.\n   * See [[VmFunctionImplementation]] for more details.\n   *\n   * A [[VmFunctionImplementation]] should not free its arguments or its return\n   * value. A VmFunctionImplementation should also not retain any references to\n   * its return value.\n   *\n   * To implement an async function, create a promise with [[newPromise]], then\n   * return the deferred promise handle from `deferred.handle` from your\n   * function implementation:\n   *\n   * ```\n   * const deferred = vm.newPromise()\n   * someNativeAsyncFunction().then(deferred.resolve)\n   * return deferred.handle\n   * ```\n   */\n  newFunction(name: string, fn: VmFunctionImplementation<QuickJSHandle>): QuickJSHandle {\n    const fnId = ++this.fnNextId\n    this.setFunction(fnId, fn)\n    return this.memory.heapValueHandle(this.ffi.QTS_NewFunction(this.ctx.value, fnId, name))\n  }\n\n  newError(error: { name: string; message: string }): QuickJSHandle\n  newError(message: string): QuickJSHandle\n  newError(): QuickJSHandle\n  newError(error?: string | { name: string; message: string }): QuickJSHandle {\n    const errorHandle = this.memory.heapValueHandle(this.ffi.QTS_NewError(this.ctx.value))\n\n    if (error && typeof error === \"object\") {\n      if (error.name !== undefined) {\n        this.newString(error.name).consume((handle) => this.setProp(errorHandle, \"name\", handle))\n      }\n\n      if (error.message !== undefined) {\n        this.newString(error.message).consume((handle) =>\n          this.setProp(errorHandle, \"message\", handle)\n        )\n      }\n    } else if (typeof error === \"string\") {\n      this.newString(error).consume((handle) => this.setProp(errorHandle, \"message\", handle))\n    } else if (error !== undefined) {\n      // This isn't supported in the type signature but maybe it will make life easier.\n      this.newString(String(error)).consume((handle) =>\n        this.setProp(errorHandle, \"message\", handle)\n      )\n    }\n\n    return errorHandle\n  }\n\n  // Read values --------------------------------------------------------------\n\n  /**\n   * `typeof` operator. **Not** [standards compliant](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof).\n   *\n   * @remarks\n   * Does not support BigInt values correctly.\n   */\n  typeof(handle: QuickJSHandle) {\n    this.runtime.assertOwned(handle)\n    return this.memory.consumeHeapCharPointer(this.ffi.QTS_Typeof(this.ctx.value, handle.value))\n  }\n\n  /**\n   * Converts `handle` into a Javascript number.\n   * @returns `NaN` on error, otherwise a `number`.\n   */\n  getNumber(handle: QuickJSHandle): number {\n    this.runtime.assertOwned(handle)\n    return this.ffi.QTS_GetFloat64(this.ctx.value, handle.value)\n  }\n\n  /**\n   * Converts `handle` to a Javascript string.\n   */\n  getString(handle: QuickJSHandle): string {\n    this.runtime.assertOwned(handle)\n    return this.memory.consumeJSCharPointer(this.ffi.QTS_GetString(this.ctx.value, handle.value))\n  }\n\n  /**\n   * Converts `handle` into a Javascript symbol. If the symbol is in the global\n   * registry in the guest, it will be created with Symbol.for on the host.\n   */\n  getSymbol(handle: QuickJSHandle): symbol {\n    this.runtime.assertOwned(handle)\n    const key = this.memory.consumeJSCharPointer(\n      this.ffi.QTS_GetSymbolDescriptionOrKey(this.ctx.value, handle.value)\n    )\n    const isGlobal = this.ffi.QTS_IsGlobalSymbol(this.ctx.value, handle.value)\n    return isGlobal ? Symbol.for(key) : Symbol(key)\n  }\n\n  /**\n   * Converts `handle` to a Javascript bigint.\n   */\n  getBigInt(handle: QuickJSHandle): bigint {\n    this.runtime.assertOwned(handle)\n    const asString = this.getString(handle)\n    return BigInt(asString)\n  }\n\n  /**\n   * `Promise.resolve(value)`.\n   * Convert a handle containing a Promise-like value inside the VM into an\n   * actual promise on the host.\n   *\n   * @remarks\n   * You may need to call [[executePendingJobs]] to ensure that the promise is resolved.\n   *\n   * @param promiseLikeHandle - A handle to a Promise-like value with a `.then(onSuccess, onError)` method.\n   */\n  resolvePromise(promiseLikeHandle: QuickJSHandle): Promise<VmCallResult<QuickJSHandle>> {\n    this.runtime.assertOwned(promiseLikeHandle)\n    const vmResolveResult = Scope.withScope((scope) => {\n      const vmPromise = scope.manage(this.getProp(this.global, \"Promise\"))\n      const vmPromiseResolve = scope.manage(this.getProp(vmPromise, \"resolve\"))\n      return this.callFunction(vmPromiseResolve, vmPromise, promiseLikeHandle)\n    })\n    if (vmResolveResult.error) {\n      return Promise.resolve(vmResolveResult)\n    }\n\n    return new Promise<VmCallResult<QuickJSHandle>>((resolve) => {\n      Scope.withScope((scope) => {\n        const resolveHandle = scope.manage(\n          this.newFunction(\"resolve\", (value) => {\n            resolve({ value: value && value.dup() })\n          })\n        )\n\n        const rejectHandle = scope.manage(\n          this.newFunction(\"reject\", (error) => {\n            resolve({ error: error && error.dup() })\n          })\n        )\n\n        const promiseHandle = scope.manage(vmResolveResult.value)\n        const promiseThenHandle = scope.manage(this.getProp(promiseHandle, \"then\"))\n        this.unwrapResult(\n          this.callFunction(promiseThenHandle, promiseHandle, resolveHandle, rejectHandle)\n        ).dispose()\n      })\n    })\n  }\n\n  // Properties ---------------------------------------------------------------\n\n  /**\n   * `handle[key]`.\n   * Get a property from a JSValue.\n   *\n   * @param key - The property may be specified as a JSValue handle, or as a\n   * Javascript string (which will be converted automatically).\n   */\n  getProp(handle: QuickJSHandle, key: QuickJSPropertyKey): QuickJSHandle {\n    this.runtime.assertOwned(handle)\n    const ptr = this.borrowPropertyKey(key).consume((quickJSKey) =>\n      this.ffi.QTS_GetProp(this.ctx.value, handle.value, quickJSKey.value)\n    )\n    const result = this.memory.heapValueHandle(ptr)\n\n    return result\n  }\n\n  /**\n   * `handle[key] = value`.\n   * Set a property on a JSValue.\n   *\n   * @remarks\n   * Note that the QuickJS authors recommend using [[defineProp]] to define new\n   * properties.\n   *\n   * @param key - The property may be specified as a JSValue handle, or as a\n   * Javascript string or number (which will be converted automatically to a JSValue).\n   */\n  setProp(handle: QuickJSHandle, key: QuickJSPropertyKey, value: QuickJSHandle) {\n    this.runtime.assertOwned(handle)\n    // free newly allocated value if key was a string or number. No-op if string was already\n    // a QuickJS handle.\n    this.borrowPropertyKey(key).consume((quickJSKey) =>\n      this.ffi.QTS_SetProp(this.ctx.value, handle.value, quickJSKey.value, value.value)\n    )\n  }\n\n  /**\n   * [`Object.defineProperty(handle, key, descriptor)`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty).\n   *\n   * @param key - The property may be specified as a JSValue handle, or as a\n   * Javascript string or number (which will be converted automatically to a JSValue).\n   */\n  defineProp(\n    handle: QuickJSHandle,\n    key: QuickJSPropertyKey,\n    descriptor: VmPropertyDescriptor<QuickJSHandle>\n  ): void {\n    this.runtime.assertOwned(handle)\n    Scope.withScope((scope) => {\n      const quickJSKey = scope.manage(this.borrowPropertyKey(key))\n\n      const value = descriptor.value || this.undefined\n      const configurable = Boolean(descriptor.configurable)\n      const enumerable = Boolean(descriptor.enumerable)\n      const hasValue = Boolean(descriptor.value)\n      const get = descriptor.get\n        ? scope.manage(this.newFunction(descriptor.get.name, descriptor.get))\n        : this.undefined\n      const set = descriptor.set\n        ? scope.manage(this.newFunction(descriptor.set.name, descriptor.set))\n        : this.undefined\n\n      this.ffi.QTS_DefineProp(\n        this.ctx.value,\n        handle.value,\n        quickJSKey.value,\n        value.value,\n        get.value,\n        set.value,\n        configurable,\n        enumerable,\n        hasValue\n      )\n    })\n  }\n\n  // Evaluation ---------------------------------------------------------------\n\n  /**\n   * [`func.call(thisVal, ...args)`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call).\n   * Call a JSValue as a function.\n   *\n   * See [[unwrapResult]], which will throw if the function returned an error, or\n   * return the result handle directly. If evaluation returned a handle containing\n   * a promise, use [[resolvePromise]] to convert it to a native promise and\n   * [[executePendingJobs]] to finish evaluating the promise.\n   *\n   * @returns A result. If the function threw synchronously, `result.error` be a\n   * handle to the exception. Otherwise `result.value` will be a handle to the\n   * value.\n   */\n  callFunction(\n    func: QuickJSHandle,\n    thisVal: QuickJSHandle,\n    ...args: QuickJSHandle[]\n  ): VmCallResult<QuickJSHandle> {\n    this.runtime.assertOwned(func)\n    const resultPtr = this.memory\n      .toPointerArray(args)\n      .consume((argsArrayPtr) =>\n        this.ffi.QTS_Call(\n          this.ctx.value,\n          func.value,\n          thisVal.value,\n          args.length,\n          argsArrayPtr.value\n        )\n      )\n\n    const errorPtr = this.ffi.QTS_ResolveException(this.ctx.value, resultPtr)\n    if (errorPtr) {\n      this.ffi.QTS_FreeValuePointer(this.ctx.value, resultPtr)\n      return { error: this.memory.heapValueHandle(errorPtr) }\n    }\n\n    return { value: this.memory.heapValueHandle(resultPtr) }\n  }\n\n  /**\n   * Like [`eval(code)`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval#Description).\n   * Evaluates the Javascript source `code` in the global scope of this VM.\n   * When working with async code, you many need to call [[executePendingJobs]]\n   * to execute callbacks pending after synchronous evaluation returns.\n   *\n   * See [[unwrapResult]], which will throw if the function returned an error, or\n   * return the result handle directly. If evaluation returned a handle containing\n   * a promise, use [[resolvePromise]] to convert it to a native promise and\n   * [[executePendingJobs]] to finish evaluating the promise.\n   *\n   * *Note*: to protect against infinite loops, provide an interrupt handler to\n   * [[setInterruptHandler]]. You can use [[shouldInterruptAfterDeadline]] to\n   * create a time-based deadline.\n   *\n   * @returns The last statement's value. If the code threw synchronously,\n   * `result.error` will be a handle to the exception. If execution was\n   * interrupted, the error will have name `InternalError` and message\n   * `interrupted`.\n   */\n  evalCode(\n    code: string,\n    filename: string = \"eval.js\",\n    /**\n     * If no options are passed, a heuristic will be used to detect if `code` is\n     * an ES module.\n     *\n     * See [[EvalFlags]] for number semantics.\n     */\n    options?: number | ContextEvalOptions\n  ): VmCallResult<QuickJSHandle> {\n    const detectModule = (options === undefined ? 1 : 0) as EvalDetectModule\n    const flags = evalOptionsToFlags(options) as EvalFlags\n    const resultPtr = this.memory\n      .newHeapCharPointer(code)\n      .consume((charHandle) =>\n        this.ffi.QTS_Eval(this.ctx.value, charHandle.value, filename, detectModule, flags)\n      )\n    const errorPtr = this.ffi.QTS_ResolveException(this.ctx.value, resultPtr)\n    if (errorPtr) {\n      this.ffi.QTS_FreeValuePointer(this.ctx.value, resultPtr)\n      return { error: this.memory.heapValueHandle(errorPtr) }\n    }\n    return { value: this.memory.heapValueHandle(resultPtr) }\n  }\n\n  /**\n   * Throw an error in the VM, interrupted whatever current execution is in progress when execution resumes.\n   * @experimental\n   */\n  throw(error: Error | QuickJSHandle) {\n    return this.errorToHandle(error).consume((handle) =>\n      this.ffi.QTS_Throw(this.ctx.value, handle.value)\n    )\n  }\n\n  /**\n   * @private\n   */\n  protected borrowPropertyKey(key: QuickJSPropertyKey): QuickJSHandle {\n    if (typeof key === \"number\") {\n      return this.newNumber(key)\n    }\n\n    if (typeof key === \"string\") {\n      return this.newString(key)\n    }\n\n    // key is already a JSValue, but we're borrowing it. Return a static handle\n    // for internal use only.\n    return new StaticLifetime(key.value as JSValueConstPointer, this.runtime)\n  }\n\n  /**\n   * @private\n   */\n  getMemory(rt: JSRuntimePointer): ContextMemory {\n    if (rt === this.rt.value) {\n      return this.memory\n    } else {\n      throw new Error(\"Private API. Cannot get memory from a different runtime\")\n    }\n  }\n\n  // Utilities ----------------------------------------------------------------\n\n  /**\n   * Dump a JSValue to Javascript in a best-effort fashion.\n   * Returns `handle.toString()` if it cannot be serialized to JSON.\n   */\n  dump(handle: QuickJSHandle) {\n    this.runtime.assertOwned(handle)\n    const type = this.typeof(handle)\n    if (type === \"string\") {\n      return this.getString(handle)\n    } else if (type === \"number\") {\n      return this.getNumber(handle)\n    } else if (type === \"bigint\") {\n      return this.getBigInt(handle)\n    } else if (type === \"undefined\") {\n      return undefined\n    } else if (type === \"symbol\") {\n      return this.getSymbol(handle)\n    }\n\n    const str = this.memory.consumeJSCharPointer(this.ffi.QTS_Dump(this.ctx.value, handle.value))\n    try {\n      return JSON.parse(str)\n    } catch (err) {\n      return str\n    }\n  }\n\n  /**\n   * Unwrap a SuccessOrFail result such as a [[VmCallResult]] or a\n   * [[ExecutePendingJobsResult]], where the fail branch contains a handle to a QuickJS error value.\n   * If the result is a success, returns the value.\n   * If the result is an error, converts the error to a native object and throws the error.\n   */\n  unwrapResult<T>(result: SuccessOrFail<T, QuickJSHandle>): T {\n    if (result.error) {\n      const context: QuickJSContext =\n        \"context\" in result.error ? (result.error as { context: QuickJSContext }).context : this\n      const cause = result.error.consume((error) => this.dump(error))\n\n      if (cause && typeof cause === \"object\" && typeof cause.message === \"string\") {\n        const { message, name, stack } = cause\n        const exception = new QuickJSUnwrapError(\"\")\n        const hostStack = exception.stack\n\n        if (typeof name === \"string\") {\n          exception.name = cause.name\n        }\n\n        if (typeof stack === \"string\") {\n          exception.stack = `${name}: ${message}\\n${cause.stack}Host: ${hostStack}`\n        }\n\n        Object.assign(exception, { cause, context, message })\n        throw exception\n      }\n\n      throw new QuickJSUnwrapError(cause, context)\n    }\n\n    return result.value\n  }\n\n  /** @private */\n  protected fnNextId = -32768 // min value of signed 16bit int used by Quickjs\n  /** @private */\n  protected fnMaps = new Map<number, Map<number, VmFunctionImplementation<QuickJSHandle>>>()\n\n  /** @private */\n  protected getFunction(fn_id: number): VmFunctionImplementation<QuickJSHandle> | undefined {\n    const map_id = fn_id >> 8\n    const fnMap = this.fnMaps.get(map_id)\n    if (!fnMap) {\n      return undefined\n    }\n    return fnMap.get(fn_id)\n  }\n\n  /** @private */\n  protected setFunction(fn_id: number, handle: VmFunctionImplementation<QuickJSHandle>) {\n    const map_id = fn_id >> 8\n    let fnMap = this.fnMaps.get(map_id)\n    if (!fnMap) {\n      fnMap = new Map<number, VmFunctionImplementation<QuickJSHandle>>()\n      this.fnMaps.set(map_id, fnMap)\n    }\n    return fnMap.set(fn_id, handle)\n  }\n\n  /**\n   * @hidden\n   */\n  private cToHostCallbacks: ContextCallbacks = {\n    callFunction: (ctx, this_ptr, argc, argv, fn_id) => {\n      if (ctx !== this.ctx.value) {\n        throw new Error(\"QuickJSContext instance received C -> JS call with mismatched ctx\")\n      }\n\n      const fn = this.getFunction(fn_id)\n      if (!fn) {\n        // this \"throw\" is not catch-able from the TS side. could we somehow handle this higher up?\n        throw new Error(`QuickJSContext had no callback with id ${fn_id}`)\n      }\n\n      return Scope.withScopeMaybeAsync(this, function* (awaited, scope) {\n        const thisHandle = scope.manage(\n          new WeakLifetime(this_ptr, this.memory.copyJSValue, this.memory.freeJSValue, this.runtime)\n        )\n        const argHandles = new Array<QuickJSHandle>(argc)\n        for (let i = 0; i < argc; i++) {\n          const ptr = this.ffi.QTS_ArgvGetJSValueConstPointer(argv, i)\n          argHandles[i] = scope.manage(\n            new WeakLifetime(ptr, this.memory.copyJSValue, this.memory.freeJSValue, this.runtime)\n          )\n        }\n\n        try {\n          const result = yield* awaited(fn.apply(thisHandle, argHandles))\n          if (result) {\n            if (\"error\" in result && result.error) {\n              debugLog(\"throw error\", result.error)\n              throw result.error\n            }\n            const handle = scope.manage(result instanceof Lifetime ? result : result.value)\n            return this.ffi.QTS_DupValuePointer(this.ctx.value, handle.value)\n          }\n          return 0 as JSValuePointer\n        } catch (error) {\n          return this.errorToHandle(error as Error).consume((errorHandle) =>\n            this.ffi.QTS_Throw(this.ctx.value, errorHandle.value)\n          )\n        }\n      }) as JSValuePointer\n    },\n  }\n\n  private errorToHandle(error: Error | QuickJSHandle): QuickJSHandle {\n    if (error instanceof Lifetime) {\n      return error\n    }\n\n    return this.newError(error)\n  }\n}\n",null,"import { EitherModule } from \"./emscripten-types\"\nimport {\n  OwnedHeapCharPointer,\n  JSContextPointerPointer,\n  JSValueConstPointerPointer,\n  JSValuePointerPointer,\n} from \"./types-ffi\"\nimport { Lifetime } from \"./lifetime\"\nimport { EitherFFI, QuickJSHandle } from \"./types\"\n\n/**\n * @private\n */\nexport class ModuleMemory {\n  constructor(public module: EitherModule) {}\n\n  toPointerArray(handleArray: QuickJSHandle[]): Lifetime<JSValueConstPointerPointer> {\n    const typedArray = new Int32Array(handleArray.map((handle) => handle.value))\n    const numBytes = typedArray.length * typedArray.BYTES_PER_ELEMENT\n    const ptr = this.module._malloc(numBytes) as JSValueConstPointerPointer\n    var heapBytes = new Uint8Array(this.module.HEAPU8.buffer, ptr, numBytes)\n    heapBytes.set(new Uint8Array(typedArray.buffer))\n    return new Lifetime(ptr, undefined, (ptr) => this.module._free(ptr))\n  }\n\n  newMutablePointerArray<T extends JSContextPointerPointer | JSValuePointerPointer>(\n    length: number\n  ): Lifetime<{ typedArray: Int32Array; ptr: T }> {\n    const zeros = new Int32Array(new Array(length).fill(0))\n    const numBytes = zeros.length * zeros.BYTES_PER_ELEMENT\n    const ptr = this.module._malloc(numBytes) as T\n    const typedArray = new Int32Array(this.module.HEAPU8.buffer, ptr, length)\n    typedArray.set(zeros)\n    return new Lifetime({ typedArray, ptr }, undefined, (value) => this.module._free(value.ptr))\n  }\n\n  newHeapCharPointer(string: string): Lifetime<OwnedHeapCharPointer> {\n    const numBytes = this.module.lengthBytesUTF8(string) + 1\n    const ptr: OwnedHeapCharPointer = this.module._malloc(numBytes) as OwnedHeapCharPointer\n    this.module.stringToUTF8(string, ptr, numBytes)\n    return new Lifetime(ptr, undefined, (value) => this.module._free(value))\n  }\n\n  consumeHeapCharPointer(ptr: OwnedHeapCharPointer): string {\n    const str = this.module.UTF8ToString(ptr)\n    this.module._free(ptr)\n    return str\n  }\n}\n",null,"import type { QuickJSFFI, QuickJSAsyncFFI } from \"./variants\"\nimport type { QuickJSContext } from \"./context\"\nimport type { SuccessOrFail, VmFunctionImplementation } from \"./vm-interface\"\nimport type { Disposable, Lifetime } from \"./lifetime\"\nimport type { QuickJSAsyncContext } from \"./context-asyncify\"\nimport type { InterruptHandler, QuickJSRuntime } from \"./runtime\"\nimport { EvalFlags, JSContextPointer, JSValueConstPointer, JSValuePointer } from \"./types-ffi\"\n\nexport type EitherFFI = QuickJSFFI | QuickJSAsyncFFI\n\n/**\n * A QuickJSHandle to a constant that will never change, and does not need to\n * be disposed.\n */\nexport type StaticJSValue = Lifetime<JSValueConstPointer, JSValueConstPointer, QuickJSRuntime>\n\n/**\n * A QuickJSHandle to a borrowed value that does not need to be disposed.\n *\n * In QuickJS, a JSValueConst is a \"borrowed\" reference that isn't owned by the\n * current scope. That means that the current scope should not `JS_FreeValue`\n * it, or retain a reference to it after the scope exits, because it may be\n * freed by its owner.\n *\n * quickjs-emscripten takes care of disposing JSValueConst references.\n */\nexport type JSValueConst = Lifetime<JSValueConstPointer, JSValuePointer, QuickJSRuntime>\n\n/**\n * A owned QuickJSHandle that should be disposed or returned.\n *\n * The QuickJS interpreter passes Javascript values between functions as\n * `JSValue` structs that references some internal data. Because passing\n * structs cross the Empscripten FFI interfaces is bothersome, we use pointers\n * to these structs instead.\n *\n * A JSValue reference is \"owned\" in its scope. before exiting the scope, it\n * should be freed,  by calling `JS_FreeValue(ctx, js_value)`) or returned from\n * the scope. We extend that contract - a JSValuePointer (`JSValue*`) must also\n * be `free`d.\n *\n * You can do so from Javascript by calling the .dispose() method.\n */\nexport type JSValue = Lifetime<JSValuePointer, JSValuePointer, QuickJSRuntime>\n\n/**\n * Wraps a C pointer to a QuickJS JSValue, which represents a Javascript value inside\n * a QuickJS virtual machine.\n *\n * Values must not be shared between QuickJSContext instances.\n * You must dispose of any handles you create by calling the `.dispose()` method.\n */\nexport type QuickJSHandle = StaticJSValue | JSValue | JSValueConst\n\nexport type JSModuleExport =\n  | {\n      type: \"function\"\n      name: string\n      implementation: (vm: QuickJSContext) => VmFunctionImplementation<QuickJSHandle>\n    }\n  | { type: \"value\"; name: string; value: (vm: QuickJSContext) => QuickJSHandle }\n\nexport interface JSModuleDefinition {\n  name: string\n  exports: JSModuleExport[]\n}\n\nexport type JSModuleLoadSuccess = string\nexport type JSModuleLoadFailure = Error | QuickJSHandle\nexport type JSModuleLoadResult =\n  | JSModuleLoadSuccess\n  | SuccessOrFail<JSModuleLoadSuccess, JSModuleLoadFailure>\n\nexport interface JSModuleLoaderAsync {\n  /** Load module (async) */\n  (moduleName: string, context: QuickJSAsyncContext):\n    | JSModuleLoadResult\n    | Promise<JSModuleLoadResult>\n}\nexport interface JSModuleLoader {\n  /** Load module (sync) */\n  (moduleName: string, context: QuickJSContext): JSModuleLoadResult\n}\n\nexport type JSModuleNormalizeSuccess = string\nexport type JSModuleNormalizeFailure = Error | QuickJSHandle\nexport type JSModuleNormalizeResult =\n  | JSModuleNormalizeSuccess\n  | SuccessOrFail<JSModuleNormalizeSuccess, JSModuleNormalizeFailure>\n\nexport interface JSModuleNormalizerAsync {\n  (baseModuleName: string, requestedName: string, vm: QuickJSAsyncContext):\n    | JSModuleNormalizeResult\n    | Promise<JSModuleNormalizeResult>\n}\nexport interface JSModuleNormalizer extends JSModuleNormalizerAsync {\n  (baseModuleName: string, requestedName: string, vm: QuickJSContext): JSModuleNormalizeResult\n}\n\ntype TODO<hint extends string = \"?\", typeHint = unknown> = never\n\nconst UnstableSymbol = Symbol(\"Unstable\")\n\nexport type PartiallyImplemented<T> = never &\n  T & {\n    [UnstableSymbol]: \"This feature may unimplemented, broken, throw errors, etc.\"\n  }\n\nexport interface RuntimeOptionsBase {\n  interruptHandler?: InterruptHandler\n  maxStackSizeBytes?: number\n  memoryLimitBytes?: number\n\n  promiseRejectionHandler?: TODO<\"JSHostPromiseRejectionTracker\">\n  runtimeInfo?: TODO<\"JS_SetRuntimeInfo\", string>\n  gcThreshold?: TODO<\"JS_SetGCThreshold\", number>\n  sharedArrayBufferFunctions?: TODO<\n    \"JS_SetJSSharedArrayBufferFunctions\",\n    { sab_alloc: TODO; sab_free: TODO; sab_dup: TODO; sab_opaque: TODO }\n  >\n\n  /**\n   * Extra lifetimes the runtime should dispose of after it is destroyed.\n   * @private\n   */\n  ownedLifetimes?: Disposable[]\n}\n\nexport interface RuntimeOptions extends RuntimeOptionsBase {\n  moduleLoader?: JSModuleLoader\n}\n\nexport interface AsyncRuntimeOptions extends RuntimeOptionsBase {\n  moduleLoader?: JSModuleLoaderAsync | JSModuleLoader\n}\n\n/**\n * Work in progress.\n */\nexport type Intrinsic =\n  | \"BaseObjects\"\n  | \"Date\"\n  | \"Eval\"\n  | \"StringNormalize\"\n  | \"RegExp\"\n  | \"RegExpCompiler\"\n  | \"JSON\"\n  | \"Proxy\"\n  | \"MapSet\"\n  | \"TypedArrays\"\n  | \"Promise\"\n  | \"BigInt\"\n  | \"BigFloat\"\n  | \"BigDecimal\"\n  | \"OperatorOverloading\"\n  | \"BignumExt\"\n\n// For informational purposes\nconst DefaultIntrinsicsList = [\n  \"BaseObjects\",\n  \"Date\",\n  \"Eval\",\n  \"StringNormalize\",\n  \"RegExp\",\n  \"JSON\",\n  \"Proxy\",\n  \"MapSet\",\n  \"TypedArrays\",\n  \"Promise\",\n] as const\n\n/**\n * Work in progress.\n */\nexport const DefaultIntrinsics = Symbol(\"DefaultIntrinsics\")\n\nexport interface ContextOptions {\n  /**\n   * What built-in objects and language features to enable?\n   * If unset, the default intrinsics will be used.\n   * To omit all intrinsics, pass an empty array.\n   */\n  intrinsics?: PartiallyImplemented<Intrinsic[]> | typeof DefaultIntrinsics\n\n  /**\n   * Wrap the provided context instead of constructing a new one.\n   * @private\n   */\n  contextPointer?: JSContextPointer\n\n  /**\n   * Extra lifetimes the context should dispose of after it is destroyed.\n   * @private\n   */\n  ownedLifetimes?: Disposable[]\n}\n\nexport interface ContextEvalOptions {\n  /** Global code (default) */\n  type?: \"global\" | \"module\"\n  /** Force \"strict\" mode */\n  strict?: boolean\n  /** Force \"strip\" mode */\n  strip?: boolean\n  /**\n   * compile but do not run. The result is an object with a\n   * JS_TAG_FUNCTION_BYTECODE or JS_TAG_MODULE tag. It can be executed\n   * with JS_EvalFunction().\n   */\n  compileOnly?: boolean\n  /** don't include the stack frames before this eval in the Error() backtraces */\n  backtraceBarrier?: boolean\n}\n\n/** Convert [[ContextEvalOptions]] to a bitfield flags */\nexport function evalOptionsToFlags(evalOptions: ContextEvalOptions | number | undefined): number {\n  if (typeof evalOptions === \"number\") {\n    return evalOptions\n  }\n\n  if (evalOptions === undefined) {\n    return 0\n  }\n\n  const { type, strict, strip, compileOnly, backtraceBarrier } = evalOptions\n  let flags = 0\n  if (type === \"global\") flags |= EvalFlags.JS_EVAL_TYPE_GLOBAL\n  if (type === \"module\") flags |= EvalFlags.JS_EVAL_TYPE_MODULE\n  if (strict) flags |= EvalFlags.JS_EVAL_FLAG_STRICT\n  if (strip) flags |= EvalFlags.JS_EVAL_FLAG_STRIP\n  if (compileOnly) flags |= EvalFlags.JS_EVAL_FLAG_COMPILE_ONLY\n  if (backtraceBarrier) flags |= EvalFlags.JS_EVAL_FLAG_BACKTRACE_BARRIER\n  return flags\n}\n\nexport type PromiseExecutor<ResolveT, RejectT> = (\n  resolve: (value: ResolveT | PromiseLike<ResolveT>) => void,\n  reject: (reason: RejectT) => void\n) => void\n\nexport function concat<T>(...values: Array<T[] | T | undefined>): T[] {\n  let result: T[] = []\n  for (const value of values) {\n    if (value !== undefined) {\n      result = result.concat(value)\n    }\n  }\n  return result\n}\n",null,"/**\n * C pointer to type `CType`. Pointer types are used internally for FFI, but\n * are not intended for external use.\n *\n * @unstable This type is considered private and may change.\n */\ntype Pointer<CType extends string> = number & { ctype: CType }\n\ntype Brand<T, B> = T & { brand: B }\n\n/**\n * `JSRuntime*`.\n */\nexport type JSRuntimePointer = Pointer<\"JSRuntime\">\n\n/**\n * `JSContext*`.\n */\nexport type JSContextPointer = Pointer<\"JSContext\">\n\n/**\n * `JSContext**`. Used internally for execute pending jobs.\n */\nexport type JSContextPointerPointer = Pointer<\"JSContext\">\n\n/**\n * `JSModuleDef*`.\n */\nexport type JSModuleDefPointer = Pointer<\"JSModuleDef\">\n\n/**\n * `JSValue*`.\n * See [[JSValue]].\n */\nexport type JSValuePointer = Pointer<\"JSValue\">\n\n/**\n * `JSValueConst*\n * See [[JSValueConst]] and [[StaticJSValue]].\n */\nexport type JSValueConstPointer = Pointer<\"JSValueConst\">\n\n/**\n * Used internally for Javascript-to-C function calls.\n */\nexport type JSValuePointerPointer = Pointer<\"JSValue[]\">\n\n/**\n * Used internally for Javascript-to-C function calls.\n */\nexport type JSValueConstPointerPointer = Pointer<\"JSValueConst[]\">\n\n/**\n * Used internally for C-to-Javascript function calls.\n */\n// type JSCFunctionPointer = Pointer<'JSCFunction'>\n\n/**\n * Used internally for C-to-Javascript function calls.\n */\nexport type QTS_C_To_HostCallbackFuncPointer = Pointer<\"C_To_HostCallbackFunc\">\n\n/**\n * Used internally for C-to-Javascript interrupt handlers.\n */\nexport type QTS_C_To_HostInterruptFuncPointer = Pointer<\"C_To_HostInterruptFunc\">\n\n/**\n * Used internally for C-to-Javascript module loading.\n */\nexport type QTS_C_To_HostLoadModuleFuncPointer = Pointer<\"C_To_HostLoadModuleFunc\">\n\n/**\n * Used internally for Javascript-to-C calls that may contain strings too large\n * for the Emscripten stack.\n */\nexport type BorrowedHeapCharPointer = Pointer<\"const char\" | \"char\" | \"js const char\">\n\n/**\n * Used internally for Javascript-to-C calls that may contain strings too large\n * for the Emscripten stack.\n */\nexport type OwnedHeapCharPointer = Pointer<\"char\">\n\n/**\n * Used internally for Javascript-to-C calls that may contain strings too large\n * for the Emscripten stack.\n */\nexport type JSBorrowedCharPointer = Pointer<\"js const char\">\n\n/**\n * Opaque pointer that was allocated by js_malloc.\n */\nexport type JSVoidPointer = Pointer<any>\n\n/**\n * @private\n */\nexport type EvalFlags = Brand<number, \"EvalFlags\">\n\n/**\n * @private\n */\nexport type EvalDetectModule = Brand<number, \"EvalDetectModule\">\n\nexport function assertSync<Args extends any[], R>(fn: (...args: Args) => R): (...args: Args) => R {\n  return function mustBeSync(...args: Args): R {\n    const result = fn(...args)\n    if (result && typeof result === \"object\" && result instanceof Promise) {\n      throw new Error(\"Function unexpectedly returned a Promise\")\n    }\n    return result\n  }\n}\n\n/** Bitfield options for JS_Eval() C function. */\nexport const EvalFlags = {\n  /** global code (default) */\n  JS_EVAL_TYPE_GLOBAL: 0 << 0,\n  /** module code */\n  JS_EVAL_TYPE_MODULE: 1 << 0,\n  /** direct call (internal use) */\n  JS_EVAL_TYPE_DIRECT: 2 << 0,\n  /** indirect call (internal use) */\n  JS_EVAL_TYPE_INDIRECT: 3 << 0,\n  JS_EVAL_TYPE_MASK: 3 << 0,\n  /** force 'strict' mode */\n  JS_EVAL_FLAG_STRICT: 1 << 3,\n  /** force 'strip' mode */\n  JS_EVAL_FLAG_STRIP: 1 << 4,\n  /**\n   * compile but do not run. The result is an object with a\n   * JS_TAG_FUNCTION_BYTECODE or JS_TAG_MODULE tag. It can be executed\n   * with JS_EvalFunction().\n   */\n  JS_EVAL_FLAG_COMPILE_ONLY: 1 << 5,\n  /** don't include the stack frames before this eval in the Error() backtraces */\n  JS_EVAL_FLAG_BACKTRACE_BARRIER: 1 << 6,\n}\n"],"names":[],"version":3,"file":"module.569ad374.js.map","sourceRoot":"../"}