{"mappings":"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","sources":["node_modules/@tootallnate/quickjs-emscripten/dist/module-asyncify.js","node_modules/@tootallnate/quickjs-emscripten/ts/module-asyncify.ts","node_modules/@tootallnate/quickjs-emscripten/dist/runtime-asyncify.js","node_modules/@tootallnate/quickjs-emscripten/ts/runtime-asyncify.ts","node_modules/@tootallnate/quickjs-emscripten/dist/context-asyncify.js","node_modules/@tootallnate/quickjs-emscripten/ts/context-asyncify.ts"],"sourcesContent":[null,"import { QuickJSAsyncContext } from \"./context-asyncify\"\nimport { QuickJSAsyncEmscriptenModule } from \"./emscripten-types\"\nimport { QuickJSNotImplemented } from \"./errors\"\nimport { QuickJSAsyncFFI } from \"./variants\"\nimport { Lifetime, Scope } from \"./lifetime\"\nimport {\n  applyBaseRuntimeOptions,\n  applyModuleEvalRuntimeOptions,\n  ModuleEvalOptions,\n  QuickJSWASMModule,\n} from \"./module\"\nimport { QuickJSAsyncRuntime } from \"./runtime-asyncify\"\nimport { AsyncRuntimeOptions, ContextOptions, RuntimeOptions } from \"./types\"\n\n/**\n * Asyncified version of [[QuickJSWASMModule]].\n *\n * Due to limitations of Emscripten's ASYNCIFY process, only a single async\n * function call can happen at a time across the entire WebAssembly module.\n *\n * That means that all runtimes, contexts, functions, etc created inside this\n * WebAssembly are limited to a single concurrent async action.\n * **Multiple concurrent async actions is an error.**\n *\n * To allow for multiple concurrent async actions, you must create multiple WebAssembly\n * modules.\n */\nexport class QuickJSAsyncWASMModule extends QuickJSWASMModule {\n  /** @private */\n  protected ffi: QuickJSAsyncFFI\n  /** @private */\n  protected module: QuickJSAsyncEmscriptenModule\n\n  /** @private */\n  constructor(module: QuickJSAsyncEmscriptenModule, ffi: QuickJSAsyncFFI) {\n    super(module, ffi)\n    this.ffi = ffi\n    this.module = module\n  }\n\n  /**\n   * Create a new async runtime inside this WebAssembly module. All runtimes inside a\n   * module are limited to a single async call at a time. For multiple\n   * concurrent async actions, create multiple WebAssembly modules.\n   */\n  override newRuntime(options: AsyncRuntimeOptions = {}): QuickJSAsyncRuntime {\n    const rt = new Lifetime(this.ffi.QTS_NewRuntime(), undefined, (rt_ptr) => {\n      this.callbacks.deleteRuntime(rt_ptr)\n      this.ffi.QTS_FreeRuntime(rt_ptr)\n    })\n    const runtime = new QuickJSAsyncRuntime({\n      module: this.module,\n      ffi: this.ffi,\n      rt,\n      callbacks: this.callbacks,\n    })\n\n    applyBaseRuntimeOptions(runtime, options)\n\n    if (options.moduleLoader) {\n      runtime.setModuleLoader(options.moduleLoader)\n    }\n\n    return runtime\n  }\n\n  /**\n   * A simplified API to create a new [[QuickJSRuntime]] and a\n   * [[QuickJSContext]] inside that runtime at the same time. The runtime will\n   * be disposed when the context is disposed.\n   */\n  override newContext(options: ContextOptions = {}): QuickJSAsyncContext {\n    const runtime = this.newRuntime()\n    const lifetimes = options.ownedLifetimes ? options.ownedLifetimes.concat([runtime]) : [runtime]\n    const context = runtime.newContext({ ...options, ownedLifetimes: lifetimes })\n    runtime.context = context\n    return context\n  }\n\n  /** Synchronous evalCode is not supported. */\n  override evalCode(): never {\n    throw new QuickJSNotImplemented(\"QuickJSWASMModuleAsyncify.evalCode: use evalCodeAsync instead\")\n  }\n\n  /**\n   * One-off evaluate code without needing to create a [[QuickJSRuntimeAsync]] or\n   * [[QuickJSContextSync]] explicitly.\n   *\n   * This version allows for asynchronous Ecmascript module loading.\n   *\n   * Note that only a single async action can occur at a time inside the entire WebAssembly module.\n   * **Multiple concurrent async actions is an error.**\n   *\n   * See the documentation for [[QuickJSWASMModule.evalCode]] for more details.\n   */\n  evalCodeAsync(code: string, options: ModuleEvalOptions): Promise<unknown> {\n    // TODO: we should really figure out generator for the Promise monad...\n    return Scope.withScopeAsync(async (scope) => {\n      const vm = scope.manage(this.newContext())\n      applyModuleEvalRuntimeOptions(vm.runtime, options)\n      const result = await vm.evalCodeAsync(code, \"eval.js\")\n\n      if (options.memoryLimitBytes !== undefined) {\n        // Remove memory limit so we can dump the result without exceeding it.\n        vm.runtime.setMemoryLimit(-1)\n      }\n\n      if (result.error) {\n        const error = vm.dump(scope.manage(result.error))\n        throw error\n      }\n\n      const value = vm.dump(scope.manage(result.value))\n      return value\n    })\n  }\n}\n",null,"import type { QuickJSAsyncWASMModule } from \"./module-asyncify\"\nimport { Lifetime } from \".\"\nimport { QuickJSAsyncContext } from \"./context-asyncify\"\nimport { QuickJSAsyncEmscriptenModule } from \"./emscripten-types\"\nimport { QuickJSAsyncFFI } from \"./variants\"\nimport { JSContextPointer, JSRuntimePointer } from \"./types-ffi\"\nimport { QuickJSModuleCallbacks } from \"./module\"\nimport { QuickJSRuntime } from \"./runtime\"\nimport {\n  ContextOptions,\n  DefaultIntrinsics,\n  JSModuleLoader,\n  JSModuleLoaderAsync,\n  JSModuleNormalizer,\n  JSModuleNormalizerAsync,\n} from \"./types\"\n\nexport class QuickJSAsyncRuntime extends QuickJSRuntime {\n  public context: QuickJSAsyncContext | undefined\n\n  /** @private */\n  protected declare module: QuickJSAsyncEmscriptenModule\n  /** @private */\n  protected declare ffi: QuickJSAsyncFFI\n  /** @private */\n  protected declare rt: Lifetime<JSRuntimePointer>\n  /** @private */\n  protected declare callbacks: QuickJSModuleCallbacks\n  /** @private */\n  protected declare contextMap: Map<JSContextPointer, QuickJSAsyncContext>\n\n  /** @private */\n  constructor(args: {\n    module: QuickJSAsyncEmscriptenModule\n    ffi: QuickJSAsyncFFI\n    rt: Lifetime<JSRuntimePointer>\n    callbacks: QuickJSModuleCallbacks\n  }) {\n    super(args)\n  }\n\n  override newContext(options: ContextOptions = {}): QuickJSAsyncContext {\n    if (options.intrinsics && options.intrinsics !== DefaultIntrinsics) {\n      throw new Error(\"TODO: Custom intrinsics are not supported yet\")\n    }\n\n    const ctx = new Lifetime(this.ffi.QTS_NewContext(this.rt.value), undefined, (ctx_ptr) => {\n      this.contextMap.delete(ctx_ptr)\n      this.callbacks.deleteContext(ctx_ptr)\n      this.ffi.QTS_FreeContext(ctx_ptr)\n    })\n\n    const context = new QuickJSAsyncContext({\n      module: this.module,\n      ctx,\n      ffi: this.ffi,\n      rt: this.rt,\n      ownedLifetimes: [],\n      runtime: this,\n      callbacks: this.callbacks,\n    })\n    this.contextMap.set(ctx.value, context)\n\n    return context\n  }\n\n  public override setModuleLoader(\n    moduleLoader: JSModuleLoaderAsync,\n    moduleNormalizer?: JSModuleNormalizerAsync\n  ): void {\n    super.setModuleLoader(\n      moduleLoader as JSModuleLoader,\n      moduleNormalizer as JSModuleNormalizer | undefined\n    )\n  }\n\n  /**\n   * Set the max stack size for this runtime in bytes.\n   * To remove the limit, set to `0`.\n   *\n   * Setting this limit also adjusts the global `ASYNCIFY_STACK_SIZE` for the entire {@link QuickJSAsyncWASMModule}.\n   * See the [pull request](https://github.com/justjake/quickjs-emscripten/pull/114) for more details.\n   */\n  public override setMaxStackSize(stackSize: number): void {\n    return super.setMaxStackSize(stackSize)\n  }\n}\n",null,"import { QuickJSContext } from \"./context\"\nimport { debugLog } from \"./debug\"\nimport { QuickJSAsyncEmscriptenModule } from \"./emscripten-types\"\nimport { QuickJSAsyncFFI } from \"./variants\"\nimport { EvalDetectModule, EvalFlags, JSRuntimePointer, JSValuePointer } from \"./types-ffi\"\nimport { Lifetime } from \"./lifetime\"\nimport { QuickJSModuleCallbacks } from \"./module\"\nimport { QuickJSAsyncRuntime } from \"./runtime-asyncify\"\nimport { ContextEvalOptions, evalOptionsToFlags, QuickJSHandle } from \"./types\"\nimport { VmCallResult } from \"./vm-interface\"\n\nexport type AsyncFunctionImplementation = (\n  this: QuickJSHandle,\n  ...args: QuickJSHandle[]\n) => Promise<QuickJSHandle | VmCallResult<QuickJSHandle> | void>\n\n/**\n * Asyncified version of [[QuickJSContext]].\n *\n * *Asyncify* allows normally synchronous code to wait for asynchronous Promises\n * or callbacks. The asyncified version of QuickJSContext can wait for async\n * host functions as though they were synchronous.\n */\nexport class QuickJSAsyncContext extends QuickJSContext {\n  public declare runtime: QuickJSAsyncRuntime\n  /** @private */\n  protected declare module: QuickJSAsyncEmscriptenModule\n  /** @private */\n  protected declare ffi: QuickJSAsyncFFI\n  /** @private */\n  protected declare rt: Lifetime<JSRuntimePointer>\n  /** @private */\n  protected declare callbacks: QuickJSModuleCallbacks\n\n  /**\n   * Asyncified version of [[evalCode]].\n   */\n  async evalCodeAsync(\n    code: string,\n    filename: string = \"eval.js\",\n    /** See [[EvalFlags]] for number semantics */\n    options?: number | ContextEvalOptions\n  ): Promise<VmCallResult<QuickJSHandle>> {\n    const detectModule = (options === undefined ? 1 : 0) as EvalDetectModule\n    const flags = evalOptionsToFlags(options) as EvalFlags\n    let resultPtr = 0 as JSValuePointer\n    try {\n      resultPtr = await this.memory\n        .newHeapCharPointer(code)\n        .consume((charHandle) =>\n          this.ffi.QTS_Eval_MaybeAsync(\n            this.ctx.value,\n            charHandle.value,\n            filename,\n            detectModule,\n            flags\n          )\n        )\n    } catch (error) {\n      debugLog(\"QTS_Eval_MaybeAsync threw\", error)\n      throw error\n    }\n    const errorPtr = this.ffi.QTS_ResolveException(this.ctx.value, resultPtr)\n    if (errorPtr) {\n      this.ffi.QTS_FreeValuePointer(this.ctx.value, resultPtr)\n      return { error: this.memory.heapValueHandle(errorPtr) }\n    }\n    return { value: this.memory.heapValueHandle(resultPtr) }\n  }\n\n  /**\n   * Similar to [[newFunction]].\n   * Convert an async host Javascript function into a synchronous QuickJS function value.\n   *\n   * Whenever QuickJS calls this function, the VM's stack will be unwound while\n   * waiting the async function to complete, and then restored when the returned\n   * promise resolves.\n   *\n   * Asyncified functions must never call other asyncified functions or\n   * `import`, even indirectly, because the stack cannot be unwound twice.\n   *\n   * See [Emscripten's docs on Asyncify](https://emscripten.org/docs/porting/asyncify.html).\n   */\n  newAsyncifiedFunction(name: string, fn: AsyncFunctionImplementation): QuickJSHandle {\n    return this.newFunction(name, fn as any)\n  }\n}\n"],"names":[],"version":3,"file":"module-asyncify.d625e428.js.map","sourceRoot":"../"}