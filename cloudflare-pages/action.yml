name: "Meticulous - Create a GitHub deployment from a Cloudflare Pages deployment"
description: "Create a GitHub deployment from a Cloudflare Pages deployment thus triggering Meticulous tests"
inputs:
  github-token:
    description: "A GitHub Actions token (should have write permission on deployments)"
    required: true
  cloudflare-api-token:
    description: "API token for Cloudflare (should have Read permission for Cloudflare Pages)"
    required: true
  cloudflare-account-id:
    description: "Account ID for Cloudflare Pages (from the Workers & Pages section of the dashboard)"
    required: true
  cloudflare-project-name:
    description: "Name of your Cloudflare Pages project (from the Workers & Pages section of the dashboard)"
    required: true
  sleep-seconds:
    description: "Time to sleep before starting to poll deployment status (in seconds)"
    required: false
    default: "300"
  deployment-poll-seconds:
    description: "Time to wait between API calls to poll for the deployment to be ready (in seconds)"
    required: false
    default: "30"
  wait-till-ready-seconds:
    description: "Maximum time to wait for the deployment to be ready (in seconds)"
    required: false
    default: "3600"
runs:
  using: "composite"
  env:
    HEAD_SHA: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.sha || github.sha }}
  steps:
    - name: Sleep a bit to wait for the deployment to exist
      if: ${{ inputs.sleep-time != '0' }}
      shell: bash
      run: sleep ${{ inputs.sleep-time }}
    - name: Wait for deployment to be ready and get URL
      shell: bash
      id: get-deployment
      run: |
        STATUS="unknown"
        LAST_RESULT=""
        SLEPT=0
        while [[ "$STATUS" != "success" ]]; do
          echo "Checking deployment status..."
          LAST_RESULT=$(curl -s -X GET "https://api.cloudflare.com/client/v4/accounts/${{ inputs.cloudflare-account-id }}/pages/projects/${{ inputs.cloudflare-project-name }}/deployments" -H "Authorization: Bearer ${{ inputs.cloudflare-api-token }}" -H "Content-Type:application/json")
          STATUS=$(echo "$LAST_RESULT" | jq -c 'first(.result[] | select(.deployment_trigger.metadata.commit_hash == "${{ env.HEAD_SHA }}") | .latest_stage.status)' --raw-output | tr -d '\n')
          if [[ "$STATUS" != "success" ]]; then
            if [[ $SLEPT -gt ${{ inputs.wait-till-ready-seconds }} ]]; then
              echo "Deployment is still not ready, failing..."
              exit 1
            fi
            echo "Deployment is not ready yet, sleeping..."
            sleep ${{ inputs.deployment-poll-seconds }}
            SLEPT=$((SLEPT+${{ inputs.deployment-poll-seconds }}))
          fi
        done
        echo "Deployment is ready!"
        echo "url=`echo "$LAST_RESULT" | jq -c 'first(.result[] | select(.deployment_trigger.metadata.commit_hash == "${{ env.HEAD_SHA }}") | .url)' --raw-output | tr -d '\n'`" >> $GITHUB_OUTPUT
        echo "environment=`echo "$LAST_RESULT" | jq -c 'first(.result[] | select(.deployment_trigger.metadata.commit_hash == "${{ env.HEAD_SHA }}") | .environment)' --raw-output | tr -d '\n'`" >> $GITHUB_OUTPUT
    - name: Create GitHub deployment from Cloudflare Pages deployment
      uses: altinukshini/deployment-action@releases/v1
      with:
        token: "${{ inputs.github-token }}"
        target_url: "${{ steps.get-deployment.outputs.url }}"
        initial_status: "success"
        environment: "Cloudflare Pages: ${{ inputs.cloudflare-project-name }} (${{ steps.get-deployment.outputs.environment }})"
